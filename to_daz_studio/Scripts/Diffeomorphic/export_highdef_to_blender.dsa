// DAZ Studio Script

var appName = "export_highdef_to_blender";
var version = 0.7;

function exportHighdefToBlender()
{
    // Write the line
    var filepath = FileDialog.doFileDialog( 
        false, 
        "Save As", 
        getScenePath(), 
        "DBZ Files (*.dbz *.duf)" 
        );
    if( !filepath )
    {
        return;
    }
    
    var date1 = new Date();
    var time1 = date1.getTime(); 
    fp = new DzGZFile( filepath );
    debug( fp.baseName() );
    fp.open( fp.WriteOnly );
    
    fp.writeLine("{");
    fp.writeLine("    \"application\": \"export_highdef_to_blender\",");
    fp.writeLine("    \"version\": " + version + ",");
    
    fp.writeLine("    \"figures\": [");

    for ( var i = 0; i < Scene.getNumNodes(); i++ )
    {
        var node = Scene.getNode(i);

        if ( node.inherits( "DzSkeleton" ) )
        {
            doFigure(fp, node);
        }
        else
        {
            obj = node.getObject();
            if (obj != null) 
            {
                doMesh(fp, obj, true, node, "        ]", "    },");
            }
        }
    }

    fp.writeLine("    {" );
    fp.writeLine("        \"name\": \"dummy\",");
    fp.writeLine("        \"num verts\": 0");
    fp.writeLine("    }" );
    
    fp.writeLine("    ]");
    fp.writeLine("}" );

    fp.close();
    var date2 = new Date();
    var time2 = date2.getTime(); 

    msg = "File \"" + filepath + "\"\nsaved in " + (time2-time1)/1000 + " seconds.";
    MessageBox.information( msg, appName, "&OK" );
}

//===============================================================================
//
//===============================================================================

function doFigure (fp, figure)
{
    figure.finalize();
    var flabel = figure.getLabel();
    startObject(fp, figure, flabel);

    var obj = figure.getObject();
    if (obj != null) 
    {
        doMesh(fp, obj, false, figure, "        ],", "")
    }
    
    var bones = figure.getAllBones();
    var n = bones.length;
    
    fp.writeLine("        \"bones\": ");
    fp.writeLine("        [");  
    c = ","
    for( var i = 0; i < n; i++ )
    {
        bone = bones[i];
        bone.finalize();
        fp.writeLine("            {");
        fp.writeLine("                \"name\": \""+ bone.name + "\",");
        fp.writeLine("                \"center_point\": " + bone.getOrigin() + ",");
        fp.writeLine("                \"end_point\": " + bone.getEndPoint() + ",");     
        fp.writeLine("                \"orientation\": " + bone.getOrientation() + ",");             
        fp.writeLine("                \"origin\": " + bone.getOrigin() + ",");             
        fp.writeLine("                \"rotation_order\": \"" + bone.getRotationOrder() + "\",");             
        fp.writeLine("                \"ws_pos\": " + bone.getWSPos() + ",");     
        fp.writeLine("                \"ws_rot\": " + bone.getWSRot() + ",");     
        fp.writeLine("                \"ws_scale\": " + bone.getWSScale() + ",");     
        fp.writeLine("                \"ws_transform\": " + bone.getWSTransform() );             
        if (i == n-1) c = "";
        fp.writeLine("            }" + c );
    }
    fp.writeLine("        ]");      
    fp.writeLine("    }," );    
}

//===============================================================================
//
//===============================================================================

function startObject(fp, node, label)
{
    fp.writeLine("    {" );
    fp.writeLine("        \"name\": \"" + node.name + "\",");
    fp.writeLine("        \"label\": \"" + label + "\",");
    fp.writeLine("        \"center_point\": " + node.getOrigin() + ",");
    fp.writeLine("        \"end_point\": " + node.getEndPoint() + ",");     
}


function doMesh (fp, obj, start, node, str1, str2)
{
    var shape = obj.getCurrentShape();
    if (shape == null)
        return false;
    var lodctrl = shape.getLODControl();
    var lodvalue = lodctrl.getValue();
    var level = shape.getSubDDrawLevel();    

    if (start)
    {
        startObject(fp, node, "undefined");
    }

    // Write HD data
    //obj.forceCacheUpdate(node,false);   
    var geom = obj.getCachedGeom();
    fp.writeLine("        \"lod\": " + lodvalue + ",");
    fp.writeLine("        \"subd level\": " + level + ",");
    writeVertices(geom, geom, "hd ");
    fp.writeLine("        ],");
    writeUVs(geom, "hd ");
    writeFaces(geom, "hd ");
    writeMaterialGroups(geom, "hd ");

    // Turn off high resolution
    lodctrl.setValue(0);
    obj.forceCacheUpdate(node,false);   
        
    var geom = obj.getCachedGeom();
    if (geom == null)
    	return endMesh(fp, str1, str2);
    var mesh = shape.getFacetMesh( false );
    if (mesh == null)
    	return endMesh(fp, str1, str2);

    writeMaterials(shape);
    writeUVs(mesh, "");
    writeFaces(mesh, "");
    writeVertices(mesh, geom, "")    
    fp.writeLine(str1)
    fp.writeLine(str2)    
    lodctrl.setValue(lodvalue);    
    return true;
}

function endMesh(fp, str1, str2)
{
    fp.writeLine("        \"dummy\": 0")
    fp.writeLine(str2);
    return false;
}

function writeMaterials(shape)
{
    var nm = shape.getNumMaterials();
    fp.writeLine("        \"num materials\": " + nm + ",");
    fp.writeLine("        \"materials\": [" );

    var c = ","
    for (var i = 0; i < nm; i++)
    {
        var mat = shape.getMaterial(i);
        if (i == nm-1) c = "";
        fp.writeLine("            \"" + mat.name + "\"" + c);
    }    
    fp.writeLine("        ],");
}

function writeMaterialGroups(geom, hd)
{
    var nm = geom.getNumMaterialGroups();
    fp.writeLine("        \"num " + hd + "material groups\": " + nm + ",");
    fp.writeLine("        \"" + hd + "material groups\": [" );

    var c = ","
    for (var i = 0; i < nm; i++)
    {
        var mat = geom.getMaterialGroup(i);
        if (i == nm-1) c = "";
        fp.writeLine("            \"" + mat.name + "\"" + c);
    }    
    fp.writeLine("        ],");
}

function writeVertices(mesh, geom, hd)
{    
    var nv = mesh.getNumVertices();
    var ne = mesh.getNumEdges();
    var nf = mesh.getNumFacets();
    var buf = ("        \"num " + hd + "verts\": " + nv + ",\n");
    buf += ("        \"num " + hd + "edges\": " + ne + ",\n");
    buf += ("        \"num " + hd + "faces\": " + nf + ",\n");
    buf += ("        \"" + hd + "vertices\": [\n" );
    
    var c = ",\n"
    for (var i = 0; i < nv; i++)
    {
        var v = geom.getVertex(i);
        if (i == nv-1) c = "";
        buf += ("            [" + v.x + ", " + v.y + ", " + v.z + "]" + c)
    }    
    fp.writeLine(buf);
}

function writeUVs(geom, hd)
{    
    var uvs = geom.getUVs();
    var nuv = uvs.getNumValues();
    var label = uvs.getLabel();
    var buf = ("        \"" + hd + "uvset\": \"" + label + "\",\n");    
    buf += ("        \"num " + hd + "uvs\": " + nuv + ",\n");
    buf += ("        \"" + hd + "uvs\": [\n" );    
    var c = ",\n"
    for (var i = 0; i < nuv; i++)
    {
        var uv = uvs.getPnt2Vec(i);
        if (i == nuv-1) c = "\n";
        buf += ("            [" + uv.x + ", " + uv.y + "]" + c);
    }    
    buf += ("        ],");
    fp.writeLine(buf);
}

function writeFaces(geom, hd)
{    
    var nf = geom.getNumFacets();
    var buf = ("        \"" + hd + "faces\": [\n" );    
    var c = ",\n"
    for (var i = 0; i < nf; i++)
    {
        var f = geom.getFacet(i);
        if (i == nf-1) c = "\n";
        buf += ("            " + f + c)
    }    
    buf += ("        ],");
    fp.writeLine(buf);    
}

//==============================================================================
// Find current duf scene path. (it should be saved untill export json)
//==============================================================================

function getScenePath()
{
    var fPath = Scene.getFilename(); //get current scene file path
    var val = fPath.left( fPath.length - 4 ) + ".dbz"; // .duf => .dbz
    return (val);
}

//==============================================================================
// Run it
//==============================================================================
exportHighdefToBlender()
